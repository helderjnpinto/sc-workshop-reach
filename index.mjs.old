// imports the Reach standard library loader
import { loadStdlib } from '@reach-sh/stdlib';

// imports our backend code that ./reach compile produces
// in the case of ethereum is the generate ABI in the case of ALGO is similar
import * as backend from './build/index.main.mjs'

//loads the standard library dynamically based on the REACH_CONNECTOR_MODE env var
const stdlib = loadStdlib(process.env);

//this defines an asynchronous function that will be the body of our frontend
// (async () => {
  // defines a quantity of network tokens as the starting balance for each test account
  const startingBalance = stdlib.parseCurrency(100);
  // create test accounts with initial endowments for Alice and Bob
  // these functions only work on the Reach-provided developer testing network
  const accAlice = await stdlib.newTestAccount(startingBalance);
  const accBob = await stdlib.newTestAccount(startingBalance);

  const fmt = (x) => stdlib.formatCurrency(x, 4);
  // gets the balance of a participant and displays with up to 4 decimal places
  const getBalance = async (who) => fmt(await stdlib.balanceOf(who));
  // here we get the initial balances before the game starts.
  const beforeAlice = await getBalance(accAlice);
  const beforeBob = await getBalance(accBob);


  //this line makes Alice deploy the application
  //the reach program index.rsh will only begin to run after it has been 
  //deployed via index.mjs
  const ctcAlice = accAlice.contract(backend);
  // this line makes Bob attach to alice contract/app
  const ctcBob = accBob.contract(backend, ctcAlice.getInfo());

  const HAND = ['Rock', 'Paper', 'Scissors'];
  const OUTCOME = ['Bob wins', 'Draw', 'Alice Wins'];
  const Player = (Who) => ({
    getHand: () => {
      const hand = Math.floor(Math.random() * 3);
      console.log(`${Who} played ${HAND[hand]}`)
      return hand;
    },
    seeOutcome: (outcome) => {
      console.log(`${Who} saw outcome ${OUTCOME[outcome]}`);
    },
  });

  //this promise is to wait the Backend to complete
  await Promise.all([
    //here we initialize a backend for Alice
    ctcAlice.p.Alice({
      //implement Alice's interact object here
      ...Player('Alice'),
      // update Alice's interface to include her wager
      // here we define it as 5 units of the network token
      wager: stdlib.parseCurrency(5),
    }),
    //here we initialize a backend for Bob
    ctcBob.p.Bob({
      //implement Bob's interact object here
      ...Player('Bob'),
      acceptWager: (amt) => {
        console.log(`Bob accepts the wager of ${fmt(amt)}.`);
      },
    }),
  ]);

  const afterAlice = await getBalance(accAlice);
  const afterBob = await getBalance(accBob);

  console.log(`Alice went from ${beforeAlice} to ${afterAlice}`);
  console.log(`Bob went from ${beforeBob} to ${afterBob}`);
// })(); //this is to call this async function that we've defined as the main body
