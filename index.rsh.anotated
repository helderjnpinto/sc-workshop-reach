'reach 0.1'

// defines a participant interact interface 
// that will be shared between the two players
const Player = {
    // the signature of Fun is a tuple with a list of params and the results 
    getHand: Fun([], UInt),
    seeOutcome: Fun([UInt], Null),
};

export const main = Reach.App(() => {
    const Alice = Participant('Alice',{
        // Specify Alice's interact interface here
        ...Player,
        wager: UInt,
    });
    const Bob = Participant('Bob', {
        //Specify Bob's interact interface here
        ...Player,
        // the acceptWager method only displays the wager doens't have any logic do refuse/accept
        acceptWager: Fun([UInt], Null),
    });
    init();
    // the init funciton tells the compiler to deploy the reach program which allows
    // the program to start doing things
    //write your program here

    // states that this block of code is something that only Alice performs.
    // that means that the variable handAlice is known only to Alice
    // handAlice is binded as the result of interacting with Alice through the getHand 
    // method that we wrote on JS
    // the declassify functions is also used because in Reach all information from 
    // frontends is secret until it is explicityly made public
    Alice.only(() => {
      // declassify the wager for transmission
      const wager = declassify(interact.wager);
      const handAlice = declassify(interact.getHand());
    });

    //here Alice join the application by publishing the value to the consensus network,
    // so it can be used to evaluate the outcome of the game. 
    // Once this happens, the code is in a "consensus step" where all participants act together
    // alice share the wager and hand with Bob
    Alice.publish(wager, handAlice)
         .pay(wager);
    // here Alice transfers the ammount of wager as part of her publication
    // commits the state of the consensus network and returns to "local step" where individual
    // participants can act alone
    commit();

//THIS IS THE HONEST VERSION OF BOB 
    // this is similar to Alice where Bob publishes his hand however we don't immediatly commit
    //the state instead we compute the outcome of the game first
    /* Bob.only(() => { */
    /*   // Line 28 has Bob accept the wager. If he doesn't like the terms, his frontend can just not respond to this method and the DApp will stall. */
    /*   interact.acceptWager(wager); */
    /*   const handBob = declassify(interact.getHand()); */
    /* }); */
    /* //Alice's similar local step and joining of the application  */
    /* // through a consensus transfer publication */
    /* Bob.publish(handBob) */
    /*     //Bob pays the wager as well */
    /*    .pay(wager); */
//EOF HONEST BOB

//THIS IS THE DISONEST BACKEND VERSION OF BOB
    Bob.only(() => {
      interact.acceptWager(wager);
      /* Bob disonest backend has access to handAlice and always wins */
      const handBob = (handAlice + 1) % 3; 
    });
    Bob.publish(handBob).pay(wager);
//EOF DISONEST BOB


    // clever equation to compute the winner of Rock Paper Scsisors
    // using modular aritmetic
    const outcome = (handAlice + (4 - handBob)) % 3;
    require(handBob == (handAlice + 1) % 3);
    assert(outcome == 0);

    const              [forAlice, forBob] =
        outcome == 2 ? [    2,         0] :
        outcome == 0 ? [    0,         2] :
        /* tie */      [    1,         1];
     
    /* this transfer takes place from the contract wallet to the participants */
    /* all of the funds are already on the contract wallet */
    transfer(forAlice * wager).to(Alice);
    transfer(forBob * wager).to(Bob);
    commit();
    // Finally we use the each form to have each of the participants send the final
    // outcome to their frontends
    // this is a local step that each participant performs
    each([Alice, Bob], () => {
      interact.seeOutcome(outcome);
    });
  });

