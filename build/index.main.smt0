(set-option :print-success true )
(set-option :produce-models true )
(set-logic ALL )
(define-sort UInt () Int )
(declare-sort Bytes 0 )
(declare-fun bytes0 () Bytes )
(declare-fun bytes (Int ) Bytes )
(define-fun Bytes_toBytes ((b Bytes ) ) Bytes b )
(declare-fun bytesAppend (Bytes Bytes ) Bytes )
(declare-sort Digest 0 )
(declare-fun digest (Bytes ) Digest )
(declare-fun Digest_toBytes (Digest ) Bytes )
(declare-sort Null 0 )
(declare-fun null () Null )
(define-fun Null_toBytes ((n Null ) ) Bytes bytes0 )
(declare-fun Bool_toBytes (Bool ) Bytes )
(declare-fun UInt_toBytes (UInt ) Bytes )
(declare-sort Address 0 )
(declare-fun Address_toBytes (Address ) Bytes )
(declare-sort Token 0 )
(declare-fun Token_toBytes (Token ) Bytes )
(declare-sort Contract 0 )
(declare-fun Contract_toBytes (Contract ) Bytes )
(declare-fun dlc_UInt_max () UInt )
(assert (<= 0 dlc_UInt_max ) )
(declare-fun address_Alice () Address )
(assert true )
(declare-fun interact_Alice_deadline () UInt )
(assert (<= 0 interact_Alice_deadline ) )
(declare-fun interact_Alice_wager () UInt )
(assert (<= 0 interact_Alice_wager ) )
(declare-fun address_Bob () Address )
(assert true )
(declare-fun v489 () Address )
(assert true )
(declare-fun v490 () Address )
(assert true )
(declare-fun v286 () UInt )
(assert (<= 0 v286 ) )
(declare-fun v287 () UInt )
(assert (<= 0 v287 ) )
(declare-fun v288 () UInt )
(assert (<= 0 v288 ) )
(assert (= v288 (- 4 v287 ) ) )
(declare-fun v289 () UInt )
(assert (<= 0 v289 ) )
(assert (= v289 (+ v286 v288 ) ) )
(declare-fun v290 () UInt )
(assert (<= 0 v290 ) )
(assert (= v290 (mod v289 3 ) ) )
(declare-fun v291 () Bool )
(assert true )
(assert (= v291 (<= 0 v290 ) ) )
(declare-fun v292 () Bool )
(assert true )
(assert (= v292 (< v290 3 ) ) )
(declare-fun v293 () Bool )
(assert true )
(assert (= v293 (ite v291 v292 false ) ) )
(assert (not v293 ) )
(check-sat-using (try-for default 120000 ) )
;; unsat
(exit )
